//#include<iostream>
//#include<algorithm>
//#include<vector>
//using namespace std;
//
//void solve(int* a, int n, int c) {
//	vector<vector<int>> dp;
//	for (int i = 0; i < 1000; i++) {
//		vector<int> temp;
//		for (int j = 0; j < 1000; j++) {
//			temp.push_back(0);
//		}
//		dp.push_back(temp);
//	}
//
//
//	for (int i = 1; i <= n; i++) {
//		for (int j = 0; j <= c; j++) {
//			dp[i][j] = dp[i - 1][j];
//			if (a[i] <= j) {
//				dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i]] + a[i]);
//			}
//		}
//	}
//	
//	cout<<dp[n][c];
//}
//
//int main() {
//	int a[100];
//	int c; 
//	int n; 
//	cin >> n >> c;
//	a[0] = -1;
//	for (int i = 1; i <= n; i++) {
//		cin >> a[i];
//	}
//	
//	solve(a, n, c);
//}
//#include<iostream>
//#include<vector>
//using namespace std;
//
//int findMax(int** a,int index, int n) {
//	int Max = a[0][index];
//	for (int i = 0; i < n; i++) {
//		if (Max < a[i][index]) {
//			Max = a[i][index];
//		}
//	}
//	return Max;
//}
//int startPos(int** a,int index, int n) {
//	int pos = findMax(a,index ,n);
//	for (int i = 0; i < n; i++) {
//		if (pos == a[i][index]) {
//			return i;
//		}
//	}
//}
//int max_value(int a, int b) {
//	if (a > b) {
//		return a;
//	}
//	return b;
//}
// 
//int solve(int**& a, int n, int m) {
//	vector<int> dp(m + 1);
//	int index = 0;
//	dp[0] = findMax(a,index ,n);
//	
//	int start = startPos(a, index, n);
//
//	for (int j = 0; j < m - 1; j++) {
//		if (start == 0) {
//			dp[j + 1] = dp[j] + max_value(a[start][j + 1], a[start + 1][j + 1]);
//			if (max_value(a[start][j + 1], a[start + 1][j + 1]) == a[start + 1][j + 1]) {
//				start = start + 1;
//			}
//		}
//		else {
//			if (start == n - 1) {
//				dp[j + 1] = dp[j] + max_value(a[start][j + 1], a[start - 1][j + 1]);
//				if (max_value(a[start][j + 1], a[start - 1][j + 1]) == a[start - 1][j + 1]) {
//					start = start - 1;
//				}
//			}
//			else {
//				dp[j + 1] = dp[j] + max_value(max_value(a[start][j + 1], a[start - 1][j + 1]), a[start + 1][j + 1]);
//				if (max_value(max_value(a[start][j + 1], a[start - 1][j + 1]), a[start + 1][j + 1])
//					== a[start - 1][j + 1]) {
//					start = start - 1;
//				}
//				else {
//					if (max_value(max_value(a[start][j + 1], a[start - 1][j + 1]), a[start + 1][j + 1])
//						== a[start + 1][j + 1]) {
//						start = start + 1;
//					}
//				}
//			}
//		}
//		
//	}
//
//
//	return dp[m - 1];
//	
//}
//
//int main()
//{
//	int n; int m;
//	cin >> n >> m;
//	int** a = new int* [n];
//	for (int i = 0; i < n; i++) {
//		a[i] = new int[m];
//	}
//
//	for (int i = 0; i < n; i++) {
//		for (int j = 0; j < m; j++) {
//			cin >> a[i][j];
//		}
//	}
//	cout<<solve(a, n, m);
//	
//
//	for (int i = 0; i < n; i++) {
//		delete[] a[i];
//	}
//}