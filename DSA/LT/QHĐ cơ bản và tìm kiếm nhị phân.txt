//int pascalTriangle(int n, int k) {
//    int** a = new int * [100];
//
//    for (int i = 0; i < 100; i++) {
//        a[i] = new int[100];
//    }
//
//    a[0][0] = 1;
//
//    for (int i = 0; i <= n; i++) {
//        a[i][0] = 1;
//        a[i][i] = 1;
//    }
//
//    for (int i = 2; i <= n; i++) {
//        for (int j = 1; j < i; j++) {
//            a[i][j] = a[i - 1][j - 1] + a[i - 1][j];
//        }
//    }
//
//    for (int i = 0; i < n + 1; i++) {
//        for (int j = 0; j <= i; j++) {
//            if (j == k && n == i) {
//                return a[i][j];
//            }   
//        }
//    }
//
//    for (int i = 0; i < 100; i++) {
//        delete[] a[i];
//    }
//}
//
//long long fibonacci(int n) {
//    long long a[100];
//    a[0] = 1;
//    a[1] = 1;
//
//    for (int i = 2; i <= n; i++) {
//        a[i] = a[i - 1] + a[i - 2];   
//    }
//
//    return a[n];
//}
//
//long long f(int n) {
//    if (n == 0 || n == 1)
//        return 1;
//    return f(n - 1) + f(n - 2);
//}


//int binarySearch(vector<int> a, int left, int right, int x) {
//    int mid = (left + right) / 2;
//    if (mid == right || mid == left) {
//        return -1;
//    }
//    if (a[mid] == x) {
//        return mid;
//    }
//    else {
//        if (x > a[mid]) {
//            return binarySearch(a, mid + 1, right, x);
//        }
//        else {
//            return binarySearch(a, left, mid - 1, x);
//        }
//    }
//}